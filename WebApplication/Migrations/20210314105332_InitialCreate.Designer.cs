// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication.Data;

namespace WebApplication.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210314105332_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AuthorGenre", b =>
                {
                    b.Property<int>("AuthorsAuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresGenreId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsAuthorId", "GenresGenreId");

                    b.HasIndex("GenresGenreId");

                    b.ToTable("AuthorGenre");
                });

            modelBuilder.Entity("WebApplication.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Name = "Владимир",
                            Surname = "Набоков"
                        },
                        new
                        {
                            AuthorId = 2,
                            Name = "Александр",
                            Surname = "Рудазов"
                        },
                        new
                        {
                            AuthorId = 3,
                            Name = "Нил",
                            Surname = "Гейман"
                        },
                        new
                        {
                            AuthorId = 4,
                            Name = "Антон",
                            Surname = "Чехов"
                        });
                });

            modelBuilder.Entity("WebApplication.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            GenreId = 1,
                            Name = "Отчаяние",
                            PublicationDate = new DateTime(2021, 3, 14, 14, 53, 31, 972, DateTimeKind.Local).AddTicks(1475)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            GenreId = 2,
                            Name = "Маг на побегушках",
                            PublicationDate = new DateTime(2021, 3, 14, 14, 53, 31, 972, DateTimeKind.Local).AddTicks(9167)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            GenreId = 3,
                            Name = "Пора туманов",
                            PublicationDate = new DateTime(2021, 3, 14, 14, 53, 31, 972, DateTimeKind.Local).AddTicks(9180)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            GenreId = 3,
                            Name = "Кукольный домик",
                            PublicationDate = new DateTime(2021, 3, 14, 14, 53, 31, 972, DateTimeKind.Local).AddTicks(9183)
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 4,
                            GenreId = 4,
                            Name = "Предложение",
                            PublicationDate = new DateTime(2021, 3, 14, 14, 53, 31, 972, DateTimeKind.Local).AddTicks(9184)
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 4,
                            GenreId = 4,
                            Name = "Иванов",
                            PublicationDate = new DateTime(2021, 3, 14, 14, 53, 31, 972, DateTimeKind.Local).AddTicks(9188)
                        });
                });

            modelBuilder.Entity("WebApplication.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Роман"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Фантастика"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Ужас"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Драмма"
                        });
                });

            modelBuilder.Entity("AuthorGenre", b =>
                {
                    b.HasOne("WebApplication.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Book", b =>
                {
                    b.HasOne("WebApplication.Models.Author", null)
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication.Models.Genre", null)
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("WebApplication.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
